# Agent Communication Protocol (ACP)
# Project: Micro-SaaS Space
# Purpose: canonical messaging & integration spec between AI agents, Replit, n8n, Supabase, and external services
# Version: 1.0
# Date: 2025-10-30
metadata:
  project: "Micro-SaaS Space"
  contact: "muhaimin@microsaas.space"
  version: "1.0"
  description: >
    ACP describes message contracts, endpoints, persistence schemas, triggers,
    retry/error policies, telemetry, and security for the five core agents:
    Idea, Market (validator), Blueprint, Builder, Growth.

agents:
  - id: idea_agent
    name: "Idea Agent"
    role: "Accept raw idea input from user or discovery pipeline; canonicalize, score initial signal, persist to Supabase 'validated_ideas' as draft"
    runtime: "Replit Agent (or OpenAI/LLM via Replit)"
    primary_endpoint:
      method: POST
      path: /agents/idea/analyze
      auth: Bearer Replit-Agent-Key
      expected_request_content_type: application/json
    responsibilities:
      - canonicalize user idea text
      - produce initial fields: short_title, description, tags, source, initial_score
      - basic sanitization & spam/honeypot checks
      - return analysis object for chain consumption
      - persist draft into Supabase.validated_ideas with status: draft
    output_event: validated_idea.created (emitted to n8n if saved)
    retry_policy:
      max_retries: 2
      backoff: exponential (base 2s)
    sample_request:
      idea_text: "A Slack bot that summarizes daily standups into action items"
      source: "landing_form"
      submitted_by: "email@example.com"
    sample_response:
      id: "uuid-v1"
      short_title: "Standup Summarizer Bot"
      description: "Summarizes daily standups into action items, auto-ticket creation"
      tags: ["productivity","slack","automation"]
      initial_score: 62.5
      status: draft
      created_at: "2025-10-30T12:00:00Z"

  - id: market_agent
    name: "Market Validator Agent"
    role: "Enrich idea with market signals: keywords, trends, competition, demand; validate and set validation_score; persist updates to Supabase"
    runtime: "Replit Agent + n8n tasks for external API calls"
    primary_endpoint:
      method: POST
      path: /agents/market/validate
      auth: Bearer Replit-Agent-Key
    trigger_sources:
      - validated_idea.created (n8n subscribes)
      - manual (UI button 'Validate idea')
    responsibilities:
      - fetch keywords via SERP / DataForSEO / Serper
      - check Google Trends (or surrogate)
      - fetch ProductHunt/Reddit/IndieHackers mentions
      - compute validation_score (0-100) with explainable factors
      - return competitor_list and differentiation_suggestions
      - update Supabase.validated_ideas: set market_demand, competitor_analysis, validation_score, status: validated|rejected
    data_contract (input):
      idea_id: uuid
      short_title: string
    data_contract (output):
      idea_id: uuid
      validation_score: float (0..100)
      top_keywords: [string]
      competitor_analysis: [{name, url, summary, strength_score}]
      demand_summary: string
      status: validated | rejected
    sample_response:
      idea_id: "uuid-v1"
      validation_score: 83.7
      top_keywords: ["standup summarizer", "daily standup notes", "meeting summarizer"]
      competitor_analysis:
        - name: "MeetSummarize"
          url: "https://meetsummarize.example"
          summary: "Focus on meetings but lacks Slack automation"
          strength_score: 45
      status: validated
    retry_policy:
      max_retries: 3
      backoff: linear (5s)
    notes:
      - n8n workflow should cache API responses to Supabase.cache table to avoid repeated API calls and rate limits.
      - If competitor API missing, fallback to web-scrape via Firecrawl and pass raw html to LLM summarizer.

  - id: blueprint_agent
    name: "Blueprint Architect Agent"
    role: "Produce technical blueprint for MVP: features, tech_stack, database schema, minimal API endpoints, UI flow; persist to Supabase.blueprints"
    runtime: "Replit Agent (LLM-driven), optional local template generator"
    primary_endpoint:
      method: POST
      path: /agents/blueprint/generate
      auth: Bearer Replit-Agent-Key
    trigger_sources:
      - validated_idea.updated (validation_score >= threshold e.g., 60)
      - manual 'Create Blueprint' action
    responsibilities:
      - generate core_features array (priority ordered)
      - propose tech_stack (Next.js, Supabase, Vercel, etc.) or alternative per user preference
      - produce database_schema (json / simple SQL DDL)
      - produce api_endpoints list with request/response contract
      - provide rough effort_estimate (hours) and recommended template repo
      - persist blueprint to Supabase.blueprints with status: ready_for_scaffold
    data_contract (output):
      blueprint_id: uuid
      idea_id: uuid
      core_features: [{id, title, description, priority}]
      tech_stack: {frontend, backend, db, auth, hosting}
      database_schema: {tables: [...] }  # JSON
      api_endpoints: [{path, method, params, response_sample}]
      effort_estimate_hours: integer
      template_repo: url | null
      status: ready_for_scaffold
    sample_response:
      blueprint_id: "uuid-bp1"
      idea_id: "uuid-v1"
      core_features:
        - id: "f1"
          title: "Slack integration"
          description: "Listen to messages and summarize daily"
          priority: 1
      tech_stack:
        frontend: "Next.js + Tailwind"
        backend: "Node.js (Supabase Functions or minimal Express)"
        db: "Supabase (Postgres)"
        hosting: "Vercel"
      template_repo: "https://github.com/microsaas/templates/standup-summarizer"
    retry_policy:
      max_retries: 2
      backoff: exponential (3s)
    notes:
      - blueprint must include human-readable and machine-readable outputs; machine-readable outputs feed CodeCrafter/Builder.

  - id: builder_agent
    name: "Builder Agent"
    alias: "CodeCrafter"
    role: "Scaffold, commit, and deploy starter code using template + blueprint; create GitHub repo, push code, and trigger Vercel deploy; save deployment info to Supabase. Provide rollback info on failure."
    runtime: "Replit Agent with GitHub & Vercel API calls; n8n handles long-running orchestration"
    primary_endpoint:
      method: POST
      path: /agents/builder/generate
      auth: Bearer Replit-Agent-Key
    trigger_sources:
      - blueprint.created (status ready_for_scaffold)
      - manual 'Scaffold MVP' request
    responsibilities:
      - select template_repo or generate code via LLM mapping from blueprint
      - create private GitHub repo (name standardized: microsaas-{short_title}-{id})
      - push initial commit with CI config and environment README
      - create Vercel project & link to repo, set env vars (SUPABASE_URL, SUPABASE_KEY, etc.)
      - run build & capture deployment_url
      - persist result in Supabase.automation_flows (n8n_workflow + status)
    data_contract (output):
      deployment_id: uuid
      blueprint_id: uuid
      repo_url: string
      vercel_url: string
      deployment_status: deployed | failed
      logs: text
    sample_response:
      deployment_id: "uuid-deploy1"
      repo_url: "https://github.com/org/microsaas-standup-summarizer"
      vercel_url: "https://standup-summarizer.vercel.app"
      deployment_status: deployed
    retry_policy:
      max_retries: 0 for destructive ops (manual retry recommended)
      backoff: none
    error_handling:
      - on partial failure (repo created but deploy failed), mark status: deploy_failed, include logs and a retry checklist
      - create incident record in Supabase.analytics with severity and notification to ops channel

  - id: growth_agent
    name: "Growth & Launch Agent"
    role: "Create launch assets, schedule newsletter & social posts, monitor early metrics, and suggest optimizations"
    runtime: "Replit Agent + n8n for scheduling + external newsletter provider (Beehiiv/SendGrid)"
    primary_endpoint:
      method: POST
      path: /agents/growth/launch
      auth: Bearer Replit-Agent-Key
    trigger_sources:
      - builder.deployment.created (status deployed)
      - manual 'Create Launch Kit'
    responsibilities:
      - generate tagline, seo_meta, product_hunt copy, twitter threads, email subject + body
      - create newsletter draft in Beehiiv or publish via API
      - create scheduled social posts (n8n + X/Twitter API)
      - start a monitoring task: watch first 7-day metrics for conversion & retention
      - update Supabase.launch_assets and growth_campaigns tables
    data_contract (output):
      launch_id: uuid
      deployment_id: uuid
      seo_meta: {title, description, tags}
      product_hunt_draft: {title, tagline, description}
      newsletter_id: provider_id
      social_schedule: [{platform, time_iso, content}]
      status: draft | published
    sample_response:
      launch_id: "uuid-launch1"
      status: draft
    retry_policy:
      max_retries: 3
      backoff: exponential (5s)
    notes:
      - Growth agent must not auto-publish to Product Hunt without founder confirmation (safety flag).

message_broker_and_eventing:
  mechanism: "n8n + Supabase realtime + Webhooks"
  event_topics:
    - validated_idea.created
    - validated_idea.updated
    - blueprint.created
    - deployment.created
    - launch.created
    - feedback.created
  delivery_guarantee: "at-least-once"
  deduplication: "agents should check Supabase record id and last_updated to ensure idempotency"
  recommended_n8n_nodes:
    - webhook (HTTP Trigger)
    - httpRequest (external API calls)
    - supabase (read/write)
    - wait (for build/deploy delays)
    - function (small JS transforms)
    - splitInBatches (for rate-limited calls)

persistence_contracts (Supabase tables):
  users:
    fields: [id:uuid, email:text, name:text, role:text, created_at:timestamptz]
  validated_ideas:
    fields:
      - id:uuid
      - title:text
      - description:text
      - tags:text[]
      - validation_score:float
      - market_demand:jsonb
      - competitor_analysis:jsonb
      - ai_summary:text
      - status:text # draft | validated | rejected
      - created_by:uuid
      - created_at:timestamptz
  blueprints:
    fields:
      - id:uuid
      - idea_id:uuid
      - core_features:jsonb
      - tech_stack:jsonb
      - database_schema:jsonb
      - api_endpoints:jsonb
      - effort_estimate_hours:int
      - template_repo:text
      - status:text # ready_for_scaffold | scaffolded
  automation_flows:
    fields:
      - id:uuid
      - blueprint_id:uuid
      - n8n_workflow:jsonb
      - automation_status:text
      - created_at:timestamptz
  deployments:
    fields:
      - id:uuid
      - blueprint_id:uuid
      - repo_url:text
      - vercel_url:text
      - status:text # deployed | failed
      - logs:jsonb
      - created_at:timestamptz
  launch_assets:
    fields:
      - id:uuid
      - deployment_id:uuid
      - seo_meta:jsonb
      - product_hunt_draft:jsonb
      - newsletter_meta:jsonb
      - social_schedule:jsonb
      - status:text

security_and_auth:
  - tokens:
      - name: REPLIT_AGENT_KEY
        usage: "Bearer token required on Replit /agents/* endpoints"
      - name: N8N_WEBHOOK_SECRET
        usage: "used to validate n8n inbound webhook calls"
  - recommended_practices:
      - store secrets in Replit Secrets or environment variables never in code
      - rotate tokens quarterly
      - sign webhook payloads with HMAC-SHA256 and verify on receiver
  - role_based_access:
      - ops: can trigger builder_agent and view logs
      - founders: can trigger blueprint & growth but require confirmation for publish
      - agents: service accounts with limited scopes (GitHub token limited to create repos within org)

error_handling_and_retries:
  - general:
      - all agents must respond with structured error object: {code, message, details}
      - agents must write incident rows to Supabase.incidents on fatal errors
  - builder_agent:
      - do not auto-retry destructive ops (repo creation, deploy). Instead, mark deploy_failed and notify ops.
  - market_agent:
      - if external API fails, use cached data from Supabase.cache and mark as 'partial_validation'
  - circuit_breaker:
      - if third-party API fails > 5 times in 10 minutes, set circuit open and fallback to local LLM-only mode for 30 minutes

telemetry_and_observability:
  - logs:
      - structured JSON logs (timestamp, agent_id, trace_id, level, msg, payload_size)
      - store recent logs in Supabase.logs table (trim oldest beyond 90 days)
  - tracing:
      - propagate trace_id across agent calls (UUID) for distributed tracing
  - metrics:
      - expose metrics to Prometheus or a simple /metrics endpoint: requests_total, errors_total, avg_latency_ms per agent
  - alerts:
      - critical failures notify Slack/Telegram ops channel via n8n

agent_contract_examples:
  - idea_to_market_flow_example:
      trigger: POST /agents/idea/analyze
      payload:
        idea_text: "AI tool that finds podcast sponsors automatically"
        source: "landing_form"
        submitted_by: "founder@x.com"
      expected_chain:
        - idea_agent writes draft to validated_ideas (status: draft)
        - event validated_idea.created → n8n triggers market_agent
        - market_agent enriches and updates validated_ideas (status: validated) with validation_score
        - if validation_score >= 60 → blueprint_agent is triggered
  - blueprint_to_builder_example:
      trigger: validated_idea.updated (check blueprint_ready)
      payload:
        blueprint_id: "uuid-bp1"
        idea_id: "uuid-v1"
      expected_chain:
        - builder_agent gets blueprint.json (machine-readable)
        - builder_agent creates GitHub repo and triggers Vercel deploy
        - builder_agent writes record to Supabase.deployments
        - event deployment.created triggers growth_agent

integration_patterns_and_gidelines:
  - idempotency:
      - all write operations include a client_request_id or upstream_id to avoid duplicates
  - atomicity:
      - use small transactions for Supabase writes where possible; if multi-table, use compensating actions on failures
  - data_versioning:
      - message payloads include schema_version and agent_version to permit rolling upgrades
  - human-in-the-loop:
      - builder_agent and growth_agent must adhere to 'publish_confirm' flag; require founder approval before pushing to live Product Hunt or mass emailing
  - safe_defaults:
      - default templates are private repos; public publication is opt-in
  - testing:
      - provide a sandbox mode (TEST_MODE env var) that uses mock providers and never publishes live

deployment_and_operational_notes:
  - staging: use separate Supabase schema 'staging_' for prelaunch testing
  - workflows: ensure n8n runs in same region as Supabase to reduce latency
  - backups: daily backup of Supabase tables and weekly export of repo templates
  - cost_control: track API usage and implement per-agent budget caps; send warning at 80% usage

appendix:
  - list_of_endpoints:
      - POST /agents/idea/analyze  -> Idea Agent
      - POST /agents/market/validate -> Market Agent
      - POST /agents/blueprint/generate -> Blueprint Agent
      - POST /agents/builder/generate -> Builder Agent
      - POST /agents/growth/launch -> Growth Agent
  - trace_example:
      trace_id: "trace-1234-uuid"
      sequence:
        - idea_agent (trace_id)
        - n8n webhook validated_idea.created (same trace_id)
        - market_agent (same trace_id)
        - blueprint_agent (same trace_id)
        - builder_agent (same trace_id)
  - changelog:
      - v1.0: initial ACP with full message contracts, retry policies, and persistence mapping
